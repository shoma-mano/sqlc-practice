// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addCategoryToTweet = `-- name: AddCategoryToTweet :execresult
INSERT IGNORE INTO tweets_categories (tweet_id, category_id)
VALUES (?, (select id from categories where content = ?))
`

type AddCategoryToTweetParams struct {
	TweetID int64
	Content sql.NullString
}

func (q *Queries) AddCategoryToTweet(ctx context.Context, arg AddCategoryToTweetParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addCategoryToTweet, arg.TweetID, arg.Content)
}

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (name, bio, uid)
VALUES (?, ?, ?)
`

type CreateAccountParams struct {
	Name string
	Bio  sql.NullString
	Uid  string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount, arg.Name, arg.Bio, arg.Uid)
}

const createCategory = `-- name: CreateCategory :execresult
INSERT IGNORE INTO categories (content)
VALUES (?)
`

func (q *Queries) CreateCategory(ctx context.Context, content sql.NullString) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCategory, content)
}

const createTweet = `-- name: CreateTweet :execresult
INSERT IGNORE INTO tweets (account_id, content)
VALUES (?, ?)
`

type CreateTweetParams struct {
	AccountID int64
	Content   sql.NullString
}

func (q *Queries) CreateTweet(ctx context.Context, arg CreateTweetParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTweet, arg.AccountID, arg.Content)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE
FROM accounts
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, uid, name, bio
FROM accounts
WHERE uid = ?
LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, uid string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, uid)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Name,
		&i.Bio,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, uid, name, bio
FROM accounts
ORDER BY name
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Name,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
